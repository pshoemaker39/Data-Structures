/*
Price Shoemaker - DePaul University - Systems II


Data compression
In this assignment, you will implement the LZW compression algorithm described in section 5.5.
In a program called Compress, write a method compress(String s) that takes a string as a parameter
and that returns an array list of integers. The array list contains the list of codes generated by the LZW compression algorithm.

Besides the array list, you will also need a symbol table to store strings and their codes, which are integers.
As in the example given in class, initialy:

-fill the symbol table with single-character strings of the characters from ASCII code 0x00 to 0x7f.
-Use a for-loop where the index variable is of type Character.
-Its ASCII value can be found using the charValue() method in the Character class.

-Once the symbol table is initialized,
-scan the string in the way described in class and in the textbook for LZW algorithm,
-adding codes to the array list.

-When your code is run through the string,
-add the value 0x80 to the end of the array list and
-return it.

-In your main method, call the compress method.
-Print every entry in the array list using a statement such as: StdOut.printf("%x ", code);

-Test your program on the string given in class (I think it was "ABRACADABRABRABRA").
-Your output should match the output given.


Submission instructions
Create a zip file called Compress.zip to contain only the Java file for the class.
Submit that zip file into the provided Submission folder on D2L.




 */

package csc403;

//place in table series of one letter strings
//place all letters in the alphabet into a symbol table
//associate each with a compression value


import stdlib.StdOut;

import java.util.ArrayList;

public class Compress {

    public static ArrayList<Integer> compress(String target) {
        A3SimplerBST<String, Integer> bst = new A3SimplerBST<>();
        ArrayList<Integer> results = new ArrayList<>();
        int i = 0;
        while (i < 129) {

            String letter = Character.toString((char) i);
            Integer asciiValue = i;

            bst.put(letter, asciiValue);

            i++;

        }

        String sequence = "";

        while (target.length() > 0) {

            String origin = Character.toString(target.charAt(0));
            target = target.substring(1);

            if (bst.contains(sequence.concat(origin))) {
                results.add(bst.get(sequence.concat(origin)));
                sequence+=origin;

            } else {

                bst.put(sequence.concat(origin),i);
                results.add(i);
                i++;
                sequence = origin;

            }
        }

        results.add(128);

        return results;
    }



    public static void main(String args[]) {

        String target = "ABRACADABRABRABRA";


        StdOut.println("Array List Results: ");

        ArrayList<Integer> results = compress(target);
        StdOut.println(results.toString());


        StdOut.println(" \n HEX VALUES: ");

        for(Integer a: results) {
            StdOut.printf("%x ", a);
        }

    }

}














































